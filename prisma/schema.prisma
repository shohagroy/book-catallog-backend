// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  admin
  customer
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String
  password   String
  role       Role
  contactNo  String
  address    String
  profileImg String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviews    Review[]

  @@map("users")
}

model Category {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]

  @@map("categories")
}

model Book {
  id              String   @id @default(uuid())
  title           String
  author          String
  genre           String
  price           Float
  publicationDate String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  categoryId   String
  category     Category      @relation(fields: [categoryId], references: [id])
  orderedBooks OrderedBook[]
  reviews      Review[]

  @@map("books")
}

enum Status {
  pending
  shipped
  delivered
}

model Order {
  id           String        @id @default(uuid())
  userId       String
  orderedBooks OrderedBook[]
  status       Status        @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderedBook {
  id       String @id @default(uuid())
  orderId  String
  bookId   String
  quantity Int

  order Order @relation(fields: [orderId], references: [id])
  book  Book  @relation(fields: [bookId], references: [id])

  @@map("ordered_books")
}

model Review {
  id     String @id @default(uuid())
  review String
  rating Int

  userId String
  bookId String

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@map("reviews")
}
